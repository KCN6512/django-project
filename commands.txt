просмотр SQL-запроса: python manage.py sqlmigrate women 0001
запуск сервера py manage.py runserver
manage.py srartproject *name*
manage.py startapp *appname*
manage.py makemigrations
manage.py migrate
manage.py shell интеркативаня среда django
manage.py sqlmigrate women 0001 просмотр sql запроса при makemogrations
py manage.py createsuperuser создание суперпользователя

object.save() сохранить в бд
object.pk = object.id #pk = id number




#interactive shell commands
from django.db import connection
connection.queries список словарей выполненных sql запросов
ClassDb.objects.all() все записи ограничено до 21
ClassDb.objects.save() сохранить в бд
ClassDb.objects.delete() удалить из бд

__gte сравнение больше или равно
__lte сравнение меньше или равно

Women.objects.filter(pk=2)  ряд с  id 2    возвращает QuerySet (состоящий из одного экземпляра записи)
Women.objects.filter(pk__gte=2)  ряд у которого id больше или равно 2
Women.objects.exclude(pk=2)  ряд где id не равно 2
Women.objects.get(pk=2) ряд у которого id 2 НО ЕСЛИ ВЕРНЕТСЯ БОЛЬШЕ 1 ИЛИ МЕНЬШЕ 1 ЗАПИСИ ВЕРНЕТ ОШИБКУ       возвращает непосредственно экземпляр записи
Women.objects.filter(pk__lte=5).order_by('title') order_by сортирует query set по аргументу 
Women.objects.order_by('-time_update') сортировка в оббратном порядке 
w_list = Women.objects.filter(pk__gte=3) список объектов с id больше или равно 3
w_list.update(cat_id=2) присвоить полю всех объектов cat_id значение 2



#jinja commands

{% имя_тэга %}
{{ имя_переменной }}
{{ value|имя_фильтра }}

{% '<urlURL-адрес или имя маршрута>'[параметры ссылки] %}
href {% url 'home' %} переход на страницу с именем home

#цикл for
{% for i in cities | reverse -%} цикл for с переносом строки выводит все через строку,минус перед закрывающим%и скобкой} позволяет убрать лишний пустые строки REVERSE В ОБРАТНОМ ПОРЯДКЕ ЦИКЛ
{% endfor -%} конец цикла - минус в коцне так же позхволяет убрать пустые строки между тегами

#сырые строки
{% raw %}
{% endraw %}

#if ветвление 
{% if uslovie %}
{% endif %}


{% load static %} загружать статические  файлы
{% extends 'women/base.html' %} в "наследуемом" html шаблоне

django фильтры:

{{ value|add }} добавить к значению (если значение строка и мождет быть преобразована к числу то  станет числом)
{{ value|linebreaks }} разделить текст на абзацы
{{ value|truncatewords:100 }} оставить в тексте только первые n слов


{% autoescape on %} обрабатывать html тэги в тексте как текст если OFF то отображать как тэги
