Secret key нужен для хэшэй(для криптографии)
VS CODE ctrl + y повторить действие
просмотр SQL-запроса: python manage.py sqlmigrate actor 0001
запуск сервера py manage.py runserver
manage.py srartproject *name*
manage.py startapp *appname*
manage.py makemigrations
manage.py migrate
manage.py shell интеркативаня среда django
manage.py sqlmigrate actor 0001 просмотр sql запроса при makemogrations
py manage.py createsuperuser создание суперпользователя
1

object.save() сохранить в бд
object.pk = object.id #pk = id number




#interactive shell commands
from django.db import connection
connection.queries список словарей выполненных sql запросов
ClassDb.objects.all() все записи ограничено до 21
ClassDb.objects.save() сохранить в бд
ClassDb.objects.delete() удалить из бд

__gte сравнение больше или равно
__lte сравнение меньше или равно

Model.objects.filter(pk=2)  ряд с  id 2    возвращает QuerySet (состоящий из одного экземпляра записи)
Model.objects.filter(pk__gte=2)  ряд у которого id больше или равно 2
Model.objects.exclude(pk=2)  ряд где id не равно 2
Model.objects.get(pk=2) ряд у которого id 2 НО ЕСЛИ ВЕРНЕТСЯ БОЛЬШЕ 1 ИЛИ МЕНЬШЕ 1 ЗАПИСИ ВЕРНЕТ ОШИБКУ       возвращает непосредственно экземпляр записи
Model.objects.filter(pk__lte=5).order_by('title') order_by сортирует query set по аргументу 
Model.objects.order_by('-time_update') сортировка в оббратном порядке 
w_list = Model.objects.filter(pk__gte=3) список объектов с id больше или равно 3
w_list.update(cat_id=2) присвоить полю всех объектов cat_id значение 2



#jinja commands

{% имя_тэга %}
виды тэгов: simple tag простые тэги и inclusion tags включающие тэги
{{ имя_переменной }}
{{ value|имя_фильтра }}

{% '<urlURL-адрес или имя маршрута>'[параметры ссылки] %}
href {% url 'home' %} переход на страницу с именем home

#цикл for
{% for i in cities | reverse -%} цикл for с переносом строки выводит все через строку,минус перед закрывающим%и скобкой} позволяет убрать лишний пустые строки REVERSE В ОБРАТНОМ ПОРЯДКЕ ЦИКЛ
{% endfor -%} конец цикла - минус в коцне так же позхволяет убрать пустые строки между тегами

#сырые строки
{% raw %}
{% endraw %}

#if ветвление 
{% if uslovie %}
{% endif %}


{% load static %} загружать статические  файлы
{% extends 'actor/base.html' %} в "наследуемом" html шаблоне

django фильтры:

{{ value|add }} добавить к значению (если значение строка и мождет быть преобразована к числу то  станет числом)
{{ value|linebreaks }} разделить текст на абзацы
{{ value|truncatewords:100 }} оставить в тексте только первые n слов


{% autoescape on %} обрабатывать html тэги в тексте как текст если OFF то отображать как тэги

DJANGO ORM
a = Model.objects.all()
a.title поле модели
a.pk, a.id primary key id записи
a.cat_id внешний ключ
.cat ссылка на дургую модель из которую через . можно получать остальные значения
>>> a[0].cat
<Category: Актрисы>
>>> a[0].cat_id
1
>>> a[0].cat.name
'Актрисы'

СОРТИРОВКА ПО ДЛИННЕ

from django.db.models.functions import Length
>>> Actor.objects.annotate(text_len=Length('title')).filter(text_len__gt=10)
<QuerySet [<Actor: Дженсен Эклс>, <Actor: Илья Ванюшин>, <Actor: Карен Фукухара>,
 <Actor: Кирилл Немов>, <Actor: Феникс Валорант>, <Actor: Энтони Старр>, <Actor: Эрин Мориарти>]>


ВЫБОРКА ИЗ ВТОРИЧНОЙ МОДЕЛИ _set

The _set object is made available when related_name is not specified.

>>> c = Category.objects.get(pk=1) 
>>> c
<Category: Актрисы>
>>> c.actor_set если нужно переименовать actor_set то нужно использовать related_name во внешнем ключе
<django.db.models.fields.related_descriptors.create_reverse_many_to_one_manager.<locals>.RelatedManager object at 0x000001F364773CD0>
>>> c.actor_set.all()
<QuerySet [<Model: Карен Фукухара>, <Model: Эрин Мориарти>]>

LOOKUPS фильтры полей
НЕСКОЛЬКО ФИЛЬТРОВ МОЖНО Actor.objects.filter(title__contains='Дж').filter(title__startwith='Джек')
>>> Actor.objects.filter(title__contains='Дж').filter(title__startswith='Джек') 
<QuerySet [<Actor: Джек Куэйд>]>

или так 
>>> Actor.objects.filter(title__contains='Дж',title__startswith='Джек') 
<QuerySet [<Actor: Джек Куэйд>]>

Model.objects.filter(pk__gte=2) вывод полей с первичным ключем id равным или больше 2
Model.objects.filter(pk__gt=2) вывод полей с первичным ключем больше 2
>>> Model.objects.filter(title__contains='Дж') вывод полей где в title есть Дж(чувствительно к регистру)
<QuerySet [<Model: Джек Куэйд>, <Model: Дженсен Эклс>]>

Model.objects.filter(title__icontains='дж') без учета регистра (в sqlite не рабоатте поиск по не ASCI символам)

ВЫБОРКА ИЗ УКАЗАННЫХ ЗНАЧЕНИЙ В СПИСКЕ
Model.objects.filter(pk__in=[1,3,5,7,9])                                   
<QuerySet [<Actor: Джек Куэйд>, <Actor: Кирилл Немов>, <Actor: Лаз Алонсо>, <Actor: Энтони Старр>, <Actor: Эрин Мориарти>]>

Model.objects.filter(cat__in=[1, 2])      
<QuerySet [<Actor: Джек Куэйд>, <Actor: Дженсен Эклс>, <Actor: Илья Ванюшин>, <Actor: Карен Фукухара>, <Actor: Карл Урбан>, <Actor: Кирилл Немов>, <Actor: 
Лаз Алонсо>, <Actor: Феникс Валорант>, <Actor: Энтони Старр>, <Actor: Эрин Мориарти>, <Actor: Эчпочмак>]>

Actor.objects.filter(pk__in=[1,3,5,7,9], is_published=False) несколько условий
<QuerySet []>

класс Q И ИЛИ НЕ
from django.db.models import Q

~ тильда НЕ приоритет 1
& И приоритет 2
| ИЛИ приоритет 3

Model.objects.filter(Q(pk__lt=5) | Q(cat_id=2)) взять все записи с pk меньше 5 или id категории равным 2
<QuerySet [<Actor: Джек Куэйд>, <Actor: Дженсен Эклс>, <Actor: Илья Ванюшин>, <Actor: Карен Фукухара>, <Actor: Карл Урбан>, <Actor: Кирилл Немов>, <Actor: 
Лаз Алонсо>, <Actor: Феникс Валорант>, <Actor: Энтони Старр>, <Actor: Эрин Мориарти>, <Actor: Эчпочмак>]>

>>> Actor.objects.filter(Q(pk__lt=5) & Q(cat_id=2))  
<QuerySet [<Actor: Карл Урбан>, <Actor: Энтони Старр>]>

>>> Actor.objects.filter(~Q(pk__lt=5) | Q(cat_id=2)) 
<QuerySet [<Actor: Джек Куэйд>, <Actor: Дженсен Эклс>, <Actor: Илья Ванюшин>, <Actor: Карл Урбан>, <Actor: Кирилл Немов>,
 <Actor: Лаз Алонсо>, <Actor: Феникс Валорант>, <Actor: Энтони Старр>, <Actor: Эчпочмак>]


БЫСТРОЕ ПОЛУЧЕНИЕ ДАННЫХ ИЗ ТАБЛИЦЫ

>>> Actor.objects.first()
<Actor: Джек Куэйд>

>>> Actor.objects.order_by('pk').first() 
<Actor: Эрин Мориарти>

>>> Actor.objects.order_by('pk').last()  
<Actor: Феникс Валорант>


ПО ДАТЕ 

>>> Actor.objects.latest('time_update')  возвращает амую последнюю запись
<Actor: Феникс Валорант>

>>> Actor.objects.order_by('title').earliest('time_update')  возвращает самуюраннюю запись
<Actor: Дженсен Эклс>


ВЫБОР ЗАПИСИ ОТНОСИТЕЛЬНО ТЕКУЩЕЙ

>>> w = Actor.objects.get(pk=5) 
>>> w
<Actor: Джек Куэйд>
#get_previous_by_column_name()
>>> w.get_previous_by_time_update()
<Actor: Эрин Мориарти>
#get_next_by_column_name()
>>> w.get_next_by_time_update()     
<Actor: Эчпочмак>
с условием
w.get_next_by_time_update(pk__gte=10)

EXIST AND COUNT

>>> c3.actor_set.exists() сущетствуют ли смешарики
False

>>> c3.actor_set.count()  количество актеров
9

>>> Actor.objects.filter(pk__gte=3).count()
9


ОБРАЩЕНИЕ К ПЕРВИЧНОЙ МОДЕЛИ ЧЕРЕЗ АТРИБУТ

ИМЯПЕРВИЧНОЙМОДЕЛИ__НАЗВАНИЕПОЛЯПЕРВИЧНОЙМОДЕЛИ
ДВА НИЖНИХ ПОДЧЕРКИВАНИЯ ОБРАЩЕНИЕ К ЗАПИСЯМ СВЯЗАННОЙ ТАБЛИЦЫ (делается join)

>>> Actor.objects.filter(cat__name='Актрисы') 
<QuerySet [<Actor: Карен Фукухара>, <Actor: Эрин Мориарти>]>

>>> Actor.objects.filter(cat__pk__in=[1]) 
<QuerySet [<Actor: Карен Фукухара>, <Actor: Эрин Мориарти>]>

>>> Category.objects.filter(actor__title__contains='Дж') 
<QuerySet [<Category: Актеры>, <Category: Актеры>]>

<QuerySet [<Actor: Карен Фукухара>, <Actor: Эрин Мориарти>]>
>>> Actor.objects.filter(cat__name__contains='ры') 

УНИКАЛЬНЫЕ ЗАПИСИ DISTINCT

>>> Category.objects.filter(actor__title__contains='Дж').distinct()
<QuerySet [<Category: Актеры>]>

ФУНКЦИИ АРГРЕГАЦИИ AGGREGATION 
Возвращает словарь агрегированных значений (средние, суммы и т.д.)

from django.db.models import *
Actor.objects.annotate(text_len=Length('title')).filter(text_len__gt=10)

>>> Actor.objects.aggregate(Min('cat_id')) минимальный id равен 1
{'cat_id__min': 1}

>>> Actor.objects.aggregate(Min('cat_id'), Max('cat_id')) несколько запросов
{'cat_id__min': 1, 'cat_id__max': 2}

>>> Actor.objects.aggregate(cat_min=Min('cat_id'), cat_max=Max('cat_id'))  можно переименовать получаемые данные
{'cat_min': 1, 'cat_max': 2}

>>> Actor.objects.aggregate(res=Sum('cat_id') - Count('cat_id'))          
{'res': 9}

>>> Actor.objects.aggregate(res=Avg('cat_id'))                   
{'res': 1.8181818181818181}

>>> Actor.objects.filter(pk__gt=4).aggregate(res=Avg('cat_id'))  
{'res': 2.0}

ВЫБОР КОНКРЕТНЫХ ПОЛЕЙ ЗАПИСИ

>>> Actor.objects.values('title', 'cat_id').get(pk=1) 
{'title': 'Эрин Мориарти', 'cat_id': 1}

ИЗ СВЯЗАННОЙ ТАБЛИЦЫ 

>>> Actor.objects.values('title', 'cat__name').get(pk=1) 
{'title': 'Эрин Мориарти', 'cat__name': 'Актрисы'}

АННТОИРОВАНИЕ ANNOTATIONS


>>> Actor.objects.values('cat_id').annotate(Count('id')) подсчет количества записей(id) для каждой cat_id
<QuerySet [{'cat_id': 1, 'id__count': 2}, {'cat_id': 2, 'id__count': 9}, {'cat_id': 3, 'id__count': 1}]>

>>> c = Category.objects.annotate(Count('actor'))   (actor=связанная модель) у каждой записи появился __count
>>> c
<QuerySet [<Category: Актрисы>, <Category: Актеры>, <Category: Смешарики>]>
>>> c[0].actor__count
2
>>> c[1].actor__count 
9

>>> c = Category.objects.annotate(total=Count('actor')) можно переименовать
>>> c[1].total       
9

>>> c = Category.objects.annotate(total=Count('actor')).filter(total__gt=0)  категории где есть хотя бы 1 запись


КЛАСС F обращение к полям таблицы как к переменным

>>> Actor.objects.filter(pk__gt=F('cat_id')) выбрать записи у которых id больше чем их cat_id

ФУНКЦИИ СУБД 

ps = Actor.objects.annotate(len=Length('title')) аннотировать длинну имени
>>> ps
<QuerySet [<Actor: Джек Куэйд>, <Actor: Дженсен Эклс>, <Actor: Илья Ванюшин>, <Actor: Карен Фукухара>, <Actor: Карл Урбан>, <Actor: Кирилл Немов>, <Actor: 
Лаз Алонсо>, <Actor: Такси 15-69>, <Actor: Феникс Валорант>, <Actor: Энтони Старр>, <Actor: Эрин Мориарти>, <Actor: Эчпочмак>]>
>>> for i in ps:
...     print(i.title, i.len)
... 
Джек Куэйд 10
Дженсен Эклс 12
Илья Ванюшин 12
Карен Фукухара 14
Карл Урбан 10
Кирилл Немов 12
Лаз Алонсо 10
Такси 15-69 11
Феникс Валорант 15
Энтони Старр 12
Эрин Мориарти 13
Эчпочмак 8
>>>


raw ЗАПРОСЫ К БАЗЕ ДАННЫХ

>>> Actor.objects.raw('SELECT * FROM actor_actor') 
<RawQuerySet: SELECT * FROM actor_actor>


ВЫВЕСТИ ВСЕХ АКТРИС 
>>> a = Actor.objects.filter(cat__name='Актрисы') 
>>> a
<QuerySet [<Actor: Карен Фукухара>, <Actor: Эрин Мориарти>]>

pk = id
id = pk
-перед аргументом ч обратном порядке
from django.db import connection
connection.queries список запросов
Model.objects.all() все записи | все отсортировано в соответствии с Meta классом в модели
Model.objects.all()[:5] первые 5 записей
Model.objects.all()[3:5] с 3 по 5 нек включая 5

СОРТИРОВКА
Model.objects.order_by('pk') сортировка по первичному ключу
Model.objects.all().reverse() сортировка наоборот 
Model.objects.filter(pk__lte=2) выбрать строки со значением pk меньше или равно 2
Model.objects.get(pk=2) выбрать только одну строку со значенеи pk = 2 если больше или меньше одной записи выдаст ошибку

ДЕКОРАТОР ИЗМЕРЕНИЯ ВРЕМЕНИ И КОЛИЧЕСТВА запросов
from django.db import connection, reset_queries
import time
import functools

def query_debugger(func):

    @functools.wraps(func)
    def inner_func(*args, **kwargs):

        reset_queries()
        
        start_queries = len(connection.queries)

        start = time.perf_counter()
        result = func(*args, **kwargs)
        end = time.perf_counter()

        end_queries = len(connection.queries)

        print(f"Function : {func.__name__}")
        print(f"Number of Queries : {end_queries - start_queries}")
        print(f"Finished in : {(end - start):.2f}s")
        return result

    return inner_func


PAGINATOR

p = Paginator(actor,2) 
>>> p.count()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'int' object is not callable
>>> p.count
6
>>> p.num_pages
3
>>> p.page_range
range(1, 4)
>>> p1 = p.page(1)
>>> p1.object_list
['Эрин Мориарти', 'Карен Фукухара']
>>> p1.has_next
<bound method Page.has_next of <Page 1 of 3>>
>>> p1.has_next()
True
>>> p1.has_previous()
False
>>> p1.has_other_pages()
True
>>> p1.next_page_number()
2
>>> p1.previous_page_number() 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "c:\Users\trosh\Desktop\pitoncheg\Python_work\djangosite\venv\lib\site-packages\django\core\paginator.py", line 204, in previous_page_number        
    return self.paginator.validate_number(self.number - 1)
  File "c:\Users\trosh\Desktop\pitoncheg\Python_work\djangosite\venv\lib\site-packages\django\core\paginator.py", line 52, in validate_number
    raise EmptyPage(_("That page number is less than 1"))
django.core.paginator.EmptyPage: <exception str() failed>
>>>



УДАЛЕНИЕ КЭША СТРАНИЦЫ
CTRL SHIFT R


ОПТИМИЗАЦИЯ ЗАПРОСОВ 

select_related(key) жадная загрузка связанных данных по внешнему ключу key который имеет тип ForeignKey

prefetch_related(key) жадная загрузка связанных данных по внешнему ключу key который имеет тип ManyToManyField

CACHE КЭШ СТРАНИЦ

cache.set() – сохранение произвольных данных в кэш по ключу;
cache.get() – выбор произвольных данных из кэша по ключу;
cache.add() – заносит новое значение в кэш, если его там еще нет (иначе данная операция игнорируется);
cache.get_or_set() – извлекает данные из кэша, если их нет, то автоматически заносится значение по умолчанию;
cache.delete() – удаление данных из кэша по ключу;
cache.clear() – полная очистка кэша.

Загрузка нескольких записей в базу BULK_CREATE
a = Actor(title='Первая',content='Запись о первой',cat_id=3)
>>> b = Actor(title='Вторая',content='Запись о второй',cat_id=3)
>>> spisok = [a,b]
>>> Actor.objects.bulk_create(spisok) 
[<Actor: Первая>, <Actor: Вторая>]


DJANGO SQL DB BACKUP
py manage.py dumpdata > datadump.json
python -Xutf8 ./manage.py dumpdata > data.json если ошибки то в UTF-8 запустить
py manage.py migrate --run-syncdb синхронизация базы
py manage.py loaddata data.json загрузить данные из json в базу данных